{"version":3,"sources":["webpack:///./node_modules/bs58check/base.js","webpack:///./node_modules/bs58/index.js","webpack:///./node_modules/hdkey/node_modules/secp256k1/lib/index.js","webpack:///./node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js","webpack:///./node_modules/base-x/src/index.js","webpack:///./node_modules/bs58check/index.js","webpack:///./node_modules/hdkey/node_modules/secp256k1/elliptic.js","webpack:///./node_modules/hdkey/lib/hdkey.js","webpack:///./node_modules/hdkey/node_modules/secp256k1/lib/elliptic.js"],"names":["base58","Buffer","module","exports","checksumFn","encode","payload","checksum","concat","length","decodeRaw","buffer","slice","newChecksum","decodeUnsafe","string","decode","Error","basex","ALPHABET","errors","IMPOSSIBLE_CASE","TWEAK_ADD","TWEAK_MUL","CONTEXT_RANDOMIZE_UNKNOW","SECKEY_INVALID","PUBKEY_PARSE","PUBKEY_SERIALIZE","PUBKEY_COMBINE","SIG_PARSE","SIGN","RECOVER","ECDH","assert","cond","msg","isUint8Array","name","value","Uint8Array","undefined","Array","isArray","numbers","join","includes","isCompressed","toTypeString","getAssertedOutput","output","len","Object","prototype","toString","call","secp256k1","seed","contextRandomize","seckey","privateKeyVerify","privateKeyNegate","tweak","privateKeyTweakAdd","privateKeyTweakMul","pubkey","publicKeyVerify","compressed","publicKeyCreate","publicKeyConvert","publicKeyNegate","pubkeys","publicKeyCombine","publicKeyTweakAdd","publicKeyTweakMul","sig","signatureNormalize","obj","outputlen","signatureExport","signatureImport","msg32","options","data","noncefn","signature","recid","ecdsaSign","ecdsaVerify","ecdsaRecover","hashfn","xbuf","ybuf","ecdh","publicToAddress","toChecksumAddress","numberToGet","generateAddresses","account","offset","publicKey","chainCode","path","hdk","addresses","i","dkey","deriveChild","address","push","dPath","isValidPath","parts","split","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit","_Buffer","base","TypeError","BASE_MAP","j","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","source","from","isBuffer","zeroes","pbegin","pend","size","b58","carry","it1","it2","str","repeat","alloc","psz","b256","it3","it4","vch","allocUnsafe","fill","createHash","bs58checkBase","sha256x2","tmp","update","digest","crypto","bs58check","MASTER_SECRET","HARDENED_OFFSET","LEN","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","_fingerprint","parentFingerprint","serialize","hdkey","version","key","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","defineProperty","get","_identifier","identifier","set","equal","readUInt32BE","privateKey","derive","entries","forEach","c","hardened","childIndex","parseInt","test","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","err","sign","hash","verify","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","EC","ec","ecparams","curve","BN","n","constructor","loadCompressedPublicKey","first","cmp","p","toRed","red","y","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadUncompressedPublicKey","x3","redISub","isZero","loadPublicKey","subarray","savePublicKey","point","bn","negate","sub","umod","toArrayLike","iadd","isub","tweaked","imul","pair","keyFromPrivate","getPublic","pairs","add","isInfinity","g","mul","r","s","nh","sigR","sigS","lenR","posR","lenS","posS","message","_noncefn","counter","nonce","isValid","d","canonical","k","pers","recoveryParam","sigObj","sigr","sigs","recoverPubKey","scalar","sha256","getX","toArray","getY"],"mappings":"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","file":"js/chunk-d5af79a8.f02308a2.js","sourcesContent":["'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n"],"sourceRoot":""}