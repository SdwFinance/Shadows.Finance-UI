{"version":3,"sources":["webpack:///./src/components/ren/Deposit.vue?7038","webpack:///src/components/ren/Deposit.vue","webpack:///./src/components/ren/Deposit.vue?3db0","webpack:///./src/components/ren/Deposit.vue","webpack:///./src/components/ren/Deposit.vue?1769"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_l","Object","keys","currencies","currency","i","_obj","attrs","class","getTokenIcon","_s","_f","directives","name","rawName","value","includes","expression","on","$event","setMaxBalanceCoin","currentPool","maxBalanceCoin","transferableBalanceText","susdWaitingPeriod","_m","inputs","style","backgroundColor","bgColors","disabled","domProps","target","composing","$set","change_currency","amountAfterBTC","minOrderSize","Array","isArray","inf_approval","_i","$$a","$$el","$$c","checked","$$v","$$i","concat","slice","staticStyle","handle_add_liquidity","loadingAction","totalShare","stakeTokens","waitingMessage","estimateGas","gasPrice","ethPrice","toFixed","staticRenderFns","helpers","dismiss","decoded","length","component"],"mappings":"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","file":"js/chunk-1297374b.b84d74de.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"add-liquidity\"},[_c('fieldset',{staticClass:\"currencies\"},[_c('legend',[_vm._v(\"Currencies:\")]),_c('ul',_vm._l((Object.keys(_vm.currencies)),function(currency,i){\nvar _obj;\nreturn _c('li',[_c('label',{attrs:{\"for\":'currency_'+i}},[_c('span',{staticClass:\"currency_label\"},[_c('img',{class:( _obj = {'token-icon': true}, _obj[currency+'-icon'] = true, _obj ),attrs:{\"src\":_vm.getTokenIcon(currency)}}),_c('span',[_vm._v(_vm._s(_vm._f(\"capitalize\")(currency))+\" \")]),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(['wbtc', 'sbtc'].includes(currency)),expression:\"['wbtc', 'sbtc'].includes(currency)\"}],staticClass:\"maxBalanceCoin\",on:{\"click\":function($event){return _vm.setMaxBalanceCoin(i)}}},[_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.currentPool == 'sbtc' && i == 2 && _vm.maxBalanceCoin(i) != '0.00'),expression:\"currentPool == 'sbtc' && i == 2 && maxBalanceCoin(i) != '0.00'\"}]},[_vm._v(\" \"+_vm._s(_vm.transferableBalanceText)+\"/ \")]),_c('span',[_vm._v(\"Max: \"+_vm._s(_vm.maxBalanceCoin(i))+\" \")]),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(i == 2 && _vm.susdWaitingPeriod),expression:\"i == 2 && susdWaitingPeriod\"}]},[_vm._m(0,true)]),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.currentPool == 'sbtc' && i == 2 && _vm.maxBalanceCoin(i) != '0.00'),expression:\"currentPool == 'sbtc' && i == 2 && maxBalanceCoin(i) != '0.00'\"}],staticClass:\"tooltip\"},[_vm._v(\" [?] \"),_c('span',{staticClass:\"tooltiptext long normalFont\"},[_vm._v(\" Max transferable balance is \"+_vm._s(_vm.transferableBalanceText)+\". You can free the remaining balance by settling. \")])])])])]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.inputs[i]),expression:\"inputs[i]\"}],style:({backgroundColor: _vm.bgColors[i]}),attrs:{\"type\":\"text\",\"id\":'currency_'+i,\"disabled\":_vm.disabled,\"name\":\"from_cur\"},domProps:{\"value\":(_vm.inputs[i])},on:{\"input\":[function($event){if($event.target.composing){ return; }_vm.$set(_vm.inputs, i, $event.target.value)},function($event){return _vm.change_currency(i, true)}]}}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(i == 0 && _vm.amountAfterBTC > 0),expression:\"i == 0 && amountAfterBTC > 0\"}]},[_vm._v(\" Amount after renVM fees: \"+_vm._s(_vm.amountAfterBTC)+\" \")]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(i == 0 && _vm.amountAfterBTC < 0),expression:\"i == 0 && amountAfterBTC < 0\"}]},[_vm._v(\" Minimum deposit amount in BTC is \"+_vm._s(_vm.minOrderSize)+\" \")])])}),0)]),_c('ul',[_c('li',{attrs:{\"id\":\"inf_approval_wrapper\"}},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.inf_approval),expression:\"inf_approval\"}],attrs:{\"id\":\"inf-approval\",\"type\":\"checkbox\",\"name\":\"inf-approval\",\"checked\":\"\"},domProps:{\"checked\":Array.isArray(_vm.inf_approval)?_vm._i(_vm.inf_approval,null)>-1:(_vm.inf_approval)},on:{\"change\":function($event){var $$a=_vm.inf_approval,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.inf_approval=$$a.concat([$$v]))}else{$$i>-1&&(_vm.inf_approval=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.inf_approval=$$c}}}}),_vm._m(1)])]),_c('gas-price'),_c('p',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.currentPool == 'ren'),expression:\"currentPool == 'ren'\"}],staticStyle:{\"text-align\":\"center\"}},[_c('a',{attrs:{\"href\":\"https://bridge.renproject.io/\"}},[_vm._v(\" Mint/redeem renBTC \")])]),_c('approve-chi'),_c('p',{staticClass:\"buttons\",staticStyle:{\"text-align\":\"center\"}},[_c('button',{attrs:{\"id\":\"add-liquidity\",\"disabled\":_vm.amountAfterBTC < 0 && +_vm.inputs[0] > 0},on:{\"click\":function($event){return _vm.handle_add_liquidity()}}},[_vm._v(\" Deposit \"),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.loadingAction == 1),expression:\"loadingAction == 1\"}],staticClass:\"loading line\"})]),_c('button',{directives:[{name:\"show\",rawName:\"v-show\",value:(['sbtc'].includes(_vm.currentPool)),expression:\"['sbtc'].includes(currentPool)\"}],attrs:{\"id\":\"add-liquidity-stake\",\"disabled\":_vm.amountAfterBTC < 0 && +_vm.inputs[0] > 0},on:{\"click\":function($event){return _vm.handle_add_liquidity(true)}}},[_vm._v(\" Deposit and stake \"),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.loadingAction == 2),expression:\"loadingAction == 2\"}],staticClass:\"loading line\"})]),_c('button',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.totalShare > 0 && ['sbtc'].includes(_vm.currentPool)),expression:\"totalShare > 0 && ['sbtc'].includes(currentPool)\"}],attrs:{\"id\":\"stakeunstaked\"},on:{\"click\":function($event){return _vm.stakeTokens()}}},[_vm._v(\" Stake unstaked \"),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.loadingAction == 3),expression:\"loadingAction == 3\"}],staticClass:\"loading line\"})])]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.show_loading),expression:\"show_loading\"}],staticClass:\"info-message gentle-message\"},[_vm._v(\" \"+_vm._s(_vm.waitingMessage)+\" \"),_c('span',{staticClass:\"loading line\"})]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.estimateGas),expression:\"estimateGas\"}],staticClass:\"info-message gentle-message\"},[_vm._v(\" Estimated tx cost: \"+_vm._s((_vm.estimateGas * _vm.gasPrice / 1e9 * _vm.ethPrice).toFixed(2))+\"$ \")]),_c('Slippage'),_c('p'),_c('tx-table')],1)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"tooltip\"},[_c('img',{staticClass:\"icon small\",attrs:{\"src\":require(\"@/assets/clock-regular.svg\")}}),_c('span',{staticClass:\"tooltiptext normalFont\"},[_vm._v(\" Cannot transfer during waiting period \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',{attrs:{\"for\":\"inf-approval\"}},[_vm._v(\"Infinite approval - trust this contract forever \"),_c('span',{staticClass:\"tooltip\"},[_vm._v(\"[?] \"),_c('span',{staticClass:\"tooltiptext long\"},[_vm._v(\" Preapprove the contract to to be able to spend any amount of your coins. You will not need to approve again. \")])])])}]\n\nexport { render, staticRenderFns }","<template>\n\t<div>\n\t\t<div class=\"add-liquidity\">\n            <fieldset class=\"currencies\">\n                <legend>Currencies:</legend>\n                <ul>\n                    <li v-for='(currency, i) in Object.keys(currencies)'>\n                        <label :for=\"'currency_'+i\">\n                        \t<span class='currency_label'>\n                                <img \n                                    :class=\"{'token-icon': true, [currency+'-icon']: true}\" \n                                    :src='getTokenIcon(currency)'>\n    \t                        <span>{{currency | capitalize}} </span>\n                                <span @click='setMaxBalanceCoin(i)' class='maxBalanceCoin' v-show=\"['wbtc', 'sbtc'].includes(currency)\">\n                                    <span v-show=\"currentPool == 'sbtc' && i == 2 && maxBalanceCoin(i) != '0.00'\">\n                                        {{transferableBalanceText}}/\n                                    </span>\n                                    <span>Max: {{ maxBalanceCoin(i) }} </span>\n                                    <span v-show='i == 2 && susdWaitingPeriod'>\n                                        <span class='tooltip'>\n                                            <img src='@/assets/clock-regular.svg' class='icon small'>\n                                            <span class='tooltiptext normalFont'>\n                                                Cannot transfer during waiting period\n                                            </span>\n                                        </span>\n                                    </span>\n                                    <span v-show=\"currentPool == 'sbtc' && i == 2 && maxBalanceCoin(i) != '0.00'\" class='tooltip'> [?]\n                                        <span class='tooltiptext long normalFont'>\n                                            Max transferable balance is {{ transferableBalanceText }}. You can free the remaining balance by settling.\n                                        </span>\n                                    </span>\n                                </span>\n                            </span>\n                        </label>\n                        <input \n                            type=\"text\" \n                            :id=\"'currency_'+i\" \n                            :disabled='disabled' \n                            name=\"from_cur\" \n                            v-model = 'inputs[i]'\n                            :style = \"{backgroundColor: bgColors[i]}\"\n                            @input='change_currency(i, true)'\n                        >\n                        <div v-show=\"i == 0 && amountAfterBTC > 0\">\n                            Amount after renVM fees: {{ amountAfterBTC }}\n                        </div>\n                        <div v-show=\"i == 0 && amountAfterBTC < 0\">\n                            Minimum deposit amount in BTC is {{ minOrderSize }}\n                        </div>\n\n                    </li>\n                </ul>\n            </fieldset>\n            <ul>\n                <!-- <li>\n                    <input id=\"sync-balances\" type=\"checkbox\" name=\"sync-balances\" @change='handle_sync_balances_proportion' :disabled='disabledButtons' checked v-model='sync_balances'>\n                    <label for=\"sync-balances\">Add all coins in a balanced proportion</label>\n                </li> -->\n                <li id='inf_approval_wrapper'>\n                    <input id=\"inf-approval\" type=\"checkbox\" name=\"inf-approval\" checked v-model='inf_approval'>\n                    <label for=\"inf-approval\">Infinite approval - trust this contract forever \n                    \t<span class='tooltip'>[?]\n                    \t\t<span class='tooltiptext long'>\n                    \t\t\tPreapprove the contract to to be able to spend any amount of your coins. You will not need to approve again.\n                    \t\t</span>\n                    \t</span>\n                    </label>\n                </li>\n            </ul>\n\n            <gas-price></gas-price>\n\n\n            <p style=\"text-align: center\" v-show=\"currentPool == 'ren'\">\n                <a href='https://bridge.renproject.io/'> Mint/redeem renBTC </a>\n            </p>\n\n            <approve-chi></approve-chi>\n\n            <p style=\"text-align: center\" class='buttons'>\n                <button id=\"add-liquidity\" :disabled='amountAfterBTC < 0 && +inputs[0] > 0' @click='handle_add_liquidity()'>\n                \t\tDeposit <span class='loading line' v-show='loadingAction == 1'></span>\n                </button>\n                <button \n                    id=\"add-liquidity-stake\" \n                    :disabled='amountAfterBTC < 0 && +inputs[0] > 0' \n                    v-show=\"['sbtc'].includes(currentPool)\"\n                    @click='handle_add_liquidity(true)'>\n                        Deposit and stake <span class='loading line' v-show='loadingAction == 2'></span>\n                </button>\n                <button id='stakeunstaked' \n                    v-show=\"totalShare > 0 && ['sbtc'].includes(currentPool)\" \n                    @click='stakeTokens()'>\n                    Stake unstaked <span class='loading line' v-show='loadingAction == 3'></span>\n                </button>\n                <div class='info-message gentle-message' v-show='show_loading'>\n                \t{{waitingMessage}} <span class='loading line'></span>\n                </div>\n                <div class='info-message gentle-message' v-show='estimateGas'>\n\t                Estimated tx cost: {{ (estimateGas * gasPrice / 1e9 * ethPrice).toFixed(2) }}$\n\t            </div>\n                <Slippage/>\n            </p>\n\n            <tx-table></tx-table>\n\n        </div>\n\t</div>\n</template>\n\n<script>\n\timport Vue from 'vue'\n    import { notify, notifyHandler, notifyNotification } from '../../init'\n\n    import * as common from '../../utils/common.js'\n    import { getters, contract as currentContract, gas as contractGas } from '../../contract'\n    import allabis from '../../allabis'\n    const compound = allabis.compound\n    import * as helpers from '../../utils/helpers'\n\n    import BN from 'bignumber.js'\n\n    import Slippage from './../common/Slippage.vue'\n\n    import Table from './Table.vue'\n    import * as store from './shiftStore'\n    import { state } from './shiftState'\n\n    import * as gasPriceStore from '../common/gasPriceStore'\n    import GasPrice from '../common/GasPrice.vue'\n\n    import * as errorStore from '../common/errorStore'\n\n    import ApproveCHI from './ApproveCHI.vue'\n\n    export default {\n    \tcomponents: {\n    \t\tSlippage,\n            'tx-table': Table,\n            'approve-chi': ApproveCHI,\n            GasPrice,\n    \t},\n    \tdata: () => ({\n    \t\tdisabled: false,\n    \t\tdisabledButtons: true,\n    \t\tsync_balances: false,\n    \t\tmax_balances: false,\n    \t\tinf_approval: true,\n    \t\twallet_balances: [],\n            transferableBalance: null,\n            susdWaitingPeriod: null,\n    \t\tbalances: [],\n    \t\tinputs: [],\n    \t\tamounts: [],\n    \t\tbgColors: [],\n    \t\tdepositc: false,\n    \t\tcoins: [],\n    \t\trates: [],\n    \t\tswap_address: currentContract.swap_address,\n    \t\tshow_loading: false,\n    \t\twaitingMessage: '',\n    \t\testimateGas: 0,\n            customGasDisabled: true,\n            customGasInput: null,\n    \t\tethPrice: 0,\n            justDeposit: false,\n            loadingAction: false,\n            errorStaking: false,\n    \t\tslippagePromise: helpers.makeCancelable(Promise.resolve()),\n    \t}),\n        async created() {\n            this.$watch(()=>currentContract.default_account, (val, oldval) => {\n            \tif(!val || !oldval) return;\n            \tif(val.toLowerCase() == oldval.toLowerCase()) return;\n                this.mounted();\n            })\n            this.$watch(()=>currentContract.initializedContracts, val => {\n                if(val) this.mounted();\n            })\n            this.$watch(()=>currentContract.currentContract, (val, oldval) => {\n            \tthis.setInputStyles(false, val, oldval)\n            \tif(currentContract.initializedContracts) this.mounted();\n            })\n\n        },\n        watch: {\n            \n        },\n        computed: {\n          ...getters,\n          currencies() {\n            if(currentContract.currentContract == 'ren') {\n                return {\n                    btc: 'BTC',\n                    wbtc: 'WBTC',\n                }\n            }\n            if(currentContract.currentContract == 'sbtc') {\n                return {\n                    btc: 'BTC',\n                    wbtc: 'wBTC',\n                    sbtc: 'sBTC',   \n                }\n            }\n          },\n          minAmount() {\n          \tif(['tbtc', 'ren', 'sbtc'].includes(currentContract.currentContract)) return 1e-8\n          \treturn 0.01\n          },\n          calcFee() {\n            let N_COINS = allabis[currentContract.currentContract].N_COINS\n            return this.fee / 100 * N_COINS / (4 * (N_COINS -1))\n          },\n          amountAfterBTC() {\n            return (BN(this.inputs[0]).times(1e8).times(1-state.mintFee/10000).minus(state.minersLockFee)).div(1e8).toFixed(8)\n          },\n          minOrderSize() {\n            return ((state.minersLockFee + state.mintFee / 10000 + 1100) / 1e8).toFixed(8)\n          },\n          fromPrecisions() {\n            return allabis[currentContract.currentContract].coin_precisions[this.from_currency]\n          },\n          toPrecisions() {\n            return allabis[currentContract.currentContract].coin_precisions[this.to_currency]\n          },\n          transferableBalanceText() {\n            return this.toFixed((this.transferableBalance / 1e18))\n          },\n          gasPrice() {\n            return gasPriceStore.state.gasPrice\n          },\n          gasPriceWei() {\n            return gasPriceStore.state.gasPriceWei\n          },\n        },\n        mounted() {\n            this.$emit('loaded')\n\t        this.setInputStyles(true)\n            if(currentContract.initializedContracts) this.mounted();\n        },\n        methods: {\n\n            async mounted(oldContract) {\n            \tthis.coins = currentContract.coins\n                this.rates = currentContract.c_rates\n                this.swap_address = currentContract.swap_address\n            \tcurrentContract.showSlippage = false;\n        \t\tcurrentContract.slippage = 0;\n                await this.handle_sync_balances();\n                await this.calcSlippage()\n                let calls = [...Array(currentContract.N_COINS).keys()].map(i=>[this.coins[i]._address, \n                \tthis.coins[i].methods.allowance(currentContract.default_account || '0x0000000000000000000000000000000000000000', this.swap_address).encodeABI()])\n                let aggcalls = await currentContract.multicall.methods.aggregate(calls).call()\n                let decoded = aggcalls[1].map(hex => currentContract.web3.eth.abi.decodeParameter('uint256', hex))\n                if(decoded.some(v=>BN(v).lte(currentContract.max_allowance.div(BN(2))) > 0))\n                \tthis.inf_approval = false\n                this.disabledButtons = false;\n                this.highlightInputs(0)\n            },\n            getTokenIcon(token) {\n                return helpers.getTokenIcon(token, this.depositc, this.currentPool)\n            },\n            toFixed(num, precisions = 2, round = 4) {\n                if(+num == 0 && ['ren', 'sbtc'].includes(currentContract.currentContract)) return '0.00'\n                if(precisions == 2 && ['tbtc', 'ren', 'sbtc'].includes(currentContract.currentContract)) precisions = 8\n                let rounded = num.toFixed(precisions)\n                return isNaN(rounded) ? '0.00' : rounded\n            },\n            useFirestore() {\n                store.useFirestore()\n            },\n            maxBalanceCoin(i) {\n                return this.toFixed(this.wallet_balances[i] * this.rates[i])\n            },\n            setMaxBalanceCoin(i) {\n                Vue.set(this.inputs, i, this.maxBalanceCoin(i))\n                if(this.currentPool == 'sbtc' && i == 2) {\n                    let maxbalance_susd = this.susdWaitingPeriod ? 0 : BN(this.transferableBalance).times(this.rates[i]).toString()\n                    Vue.set(this.inputs, i, maxbalance_susd)\n                }\n            },\n        \tinputsFormat(i) {\n        \t\tif(this.inputs[i]) {\n        \t\t\treturn this.toFixed(+this.inputs[i])\n        \t\t}\n        \t\treturn '0.00'\n        \t},\n            setInputStyles(newInputs = false, newContract, oldContract) {\n\t\t\t\tif(oldContract) {\n\t\t\t\t\tfor(let i = 0; i < allabis[newContract].N_COINS - allabis[oldContract].N_COINS; i++) {\n\t\t\t\t\t\tthis.inputs.push('0.00')\n\t\t\t\t\t}\n\t\t\t\t\tif(allabis[oldContract].N_COINS - allabis[newContract].N_COINS > 0) {\n\t\t\t\t\t\tthis.inputs = this.inputs.filter((_, i) => i < allabis[newContract].N_COINS)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(newInputs) {\n\t\t\t\t\tthis.inputs = new Array(Object.keys(this.currencies).length).fill('0.00')\n\t\t\t\t}\n\t        \tthis.bgColors = Array(currentContract.N_COINS).fill({\n\t        \t\tbackgroundColor: '#707070',\n\t        \t\tcolor: '#d0d0d0',\n\t        \t})\n            },\n            async calcSlippage() {\n            \ttry {\n                    let inputs = [...this.inputs]\n                    inputs[0] = this.amountAfterBTC > 0 ? this.amountAfterBTC : 0\n\t            \tthis.slippagePromise.cancel();\n\t        \t\tthis.slippagePromise = helpers.makeCancelable(common.calc_slippage(inputs, true))\n\t        \t\tawait this.slippagePromise;\n            \t}\n            \tcatch(err) {\n            \t\tconsole.error(err)\n            \t}\n            },\n            async handle_sync_balances() {\n\t\t\t    await common.update_fee_info();\n\t\t\t    let calls = []\n                for(let [i, coin] of this.coins.slice(1).entries()) {\n    \t           calls.push([coin._address, coin.methods.balanceOf(currentContract.default_account || '0x0000000000000000000000000000000000000000').encodeABI()])\n    \t           calls.push([currentContract.swap._address, currentContract.swap.methods.balances(i).encodeABI()])\n                }\n                if(this.currentPool == 'sbtc') {\n                    calls.push([this.coins[2]._address, this.coins[2].methods.transferableSynths(currentContract.default_account || '0x0000000000000000000000000000000000000000').encodeABI()])\n                    calls.push([currentContract.snxExchanger._address, \n                        currentContract.snxExchanger.methods\n                        .maxSecsLeftInWaitingPeriod(currentContract.default_account, \"0x7355534400000000000000000000000000000000000000000000000000000000\")\n                        .encodeABI()])\n                }\n\t\t\t    let aggcalls = await currentContract.multicall.methods.aggregate(calls).call()\n\t\t\t    let decoded = aggcalls[1].map(hex => currentContract.web3.eth.abi.decodeParameter('uint256', hex))\n                let endOffset = 0\n                if(this.currentPool == 'sbtc') {\n                    this.transferableBalance = decoded[decoded.length-2]\n                    this.susdWaitingPeriod = +(decoded[decoded.length-1] != 0)\n                    endOffset = 2\n                }\n                helpers.chunkArr(decoded.slice(0, decoded.length-endOffset), 2).map((v, i) => {\n                    Vue.set(this.wallet_balances, i+1, v[0])\n                    if(!currentContract.default_account) Vue.set(this.wallet_balances, i+1, 0)\n                    Vue.set(this.balances, i+1, +v[1])\n                })\n\t\t\t},\n\t\t\tasync handle_sync_balances_proportion() {\n\t\t\t\tawait this.handle_sync_balances();\n\t\t\t\t//for(let i = 0; i < currentContract.N_COINS; i++) this.change_currency(i)\n\t\t\t},\n\t\t\tdeposit_stake() {\n\t\t\t\tthis.show_loading = true;\n\t\t\t\tthis.handle_add_liquidity(true)\n\t\t\t},\n            setLoadingAction(val) {\n                this.loadingAction = val\n                setTimeout(() => this.loadingAction = false, 500)\n            },\n            async stakeTokens(tokens, deposit_and_stake = false) {\n                if(this.loadingAction == 3) return;\n                this.setLoadingAction(3);\n                if(!tokens) tokens = BN(await currentContract.swap_token.methods.balanceOf(currentContract.default_account).call());\n                this.waitingMessage = `Please approve staking ${this.toFixed(tokens.div(BN(1e18)))} of your sCurve tokens`\n                let curveRewards = new contract.web3.eth.Contract(allabis.sbtc.sCurveRewards_abi, allabis.sbtc.sCurveRewards_address)\n\n                var { dismiss } = notifyNotification(this.waitingMessage)\n                await common.ensure_stake_allowance(tokens, curveRewards, this.inf_approval);\n                dismiss()\n                this.waitingMessage = `Please confirm stake transaction ${deposit_and_stake ? '(2/2)' : ''}`\n                var { dismiss } = notifyNotification(this.waitingMessage)\n                let promises = await Promise.all([helpers.getETHPrice()])\n                this.ethPrice = promises[0]\n                this.estimateGas = 200000\n                try {\n                    await curveRewards.methods.stake(tokens.toFixed(0,1)).send({\n                        from: currentContract.default_account,\n                        gasPrice: this.gasPriceWei,\n                        gas: 400000,\n                    })\n                    .once('transactionHash', hash => {\n                        this.waitingMessage = `Waiting for stake transaction to confirm \n                            ${deposit_and_stake ? '(2/2)' : ''}: no further action needed`\n                        dismiss()\n                        notifyHandler(hash)\n                    })\n                    currentContract.totalShare -= tokens\n                    common.update_fee_info()\n                }\n                catch(err) {\n                    console.error(err)\n                    dismiss()\n                    errorStore.handleError(err)\n                }\n                this.waitingMessage = ''\n                this.show_loading = false;\n            },\n\t\t\tasync handle_add_liquidity(stake = false) {\n                let actionType = stake == false ? 1 : 2;\n                if(this.loadingAction == actionType) return;\n                this.setLoadingAction(actionType)\n                let promises = await Promise.all([helpers.getETHPrice()])\n                this.ethPrice = promises[0]\n\t\t\t\t//this.show_loading = true\n\t\t\t\tlet calls = this.coins.slice(1).map((coin, i) => {\n                            if(this.currentPool == 'sbtc' && i == 1)\n                                return [coin._address, coin.methods.transferableSynths(currentContract.default_account).encodeABI()]\n\t\t\t\t            return [coin._address, coin.methods.balanceOf(currentContract.default_account).encodeABI()]\n                        }\n                    )\n\t\t\t\tcalls.push([currentContract.swap_token._address, currentContract.swap_token.methods.totalSupply().encodeABI()])\n                let endOffset = 1\n                if(this.currentPool == 'sbtc') {\n                    calls.push([\n                        currentContract.snxExchanger._address, \n                            currentContract.snxExchanger.methods\n                            .maxSecsLeftInWaitingPeriod(currentContract.default_account, \"0x7355534400000000000000000000000000000000000000000000000000000000\")\n                            .encodeABI()\n                        ]\n                    )\n                    endOffset = 2\n                }\n                if(currentContract.currentContract == 'ren') this.amounts = this.amounts.slice(0,2)\n \t\t\t\tlet aggcalls = await currentContract.multicall.methods.aggregate(calls).call()\n\t\t\t\tlet decoded = aggcalls[1].map(hex=>currentContract.web3.eth.abi.decodeParameter('uint256',hex))\n                decoded.slice(0, decoded.length-endOffset).forEach((balance, i) => {\n                    balance = BN(balance)\n                    if(this.currentPool == 'sbtc' && i+1 == 2 && decoded[decoded.length-1] != 0) bal = BN(0)\n                    let precisions = allabis[currentContract.currentContract].coin_precisions[i+1]\n                    let maxDiff = (BN(balance).div(precisions)).minus(this.inputs[i+1])\n                    if(balance.gt(0) && maxDiff.lt(0) && BN(maxDiff).lt(BN(this.minAmount))) {\n                        Vue.set(this.amounts, i+1, BN(balance).toFixed(0,1))\n                    }\n                    else Vue.set(this.amounts, i+1, BN(this.inputs[i+1]).times(precisions).toFixed(0,1))\n                })\n                Vue.set(this.amounts, 0, BN(this.amountAfterBTC).times(1e8).toFixed(0,1))\n                if(+this.inputs[0] == 0) Vue.set(this.amounts, 0, 0)\n\t\t\t\tlet total_supply = +decoded[decoded.length-endOffset];\n\t\t\t\t// /this.waitingMessage = 'Please approve spending your coins'\n                var token_amount = 0;\n                if(total_supply > 0) {\n                    let token_amounts = this.amounts\n                    token_amount = await currentContract.swap.methods.calc_token_amount(token_amounts, true).call();\n                    token_amount = BN(token_amount).times(BN(1).minus(BN(this.calcFee)))\n                    token_amount = BN(token_amount).times(0.99).toFixed(0,1);\n                }\n\t\t\t\tthis.estimateGas = contractGas.deposit[this.currentPool] / 2\n\t\t      \n                if(+this.inputs[0] > 0) {\n                    for(let i = 1; i < currentContract.N_COINS; i++) {\n                        await common.approveAmount(this.coins[i], BN(this.amounts[i]), currentContract.default_account, allabis[currentContract.currentContract].adapterBiconomyAddress, this.inf_approval)\n                    }\n                }\n                else {\n                    if (this.inf_approval)\n                        await common.ensure_allowance(this.amounts, false, undefined, undefined, true)\n                    else {\n                        await common.ensure_allowance(this.amounts, false);\n                    }\n                }\n\t\n\t\t\t    let receipt;\n\t\t\t    let minted = 0;\n                //this.waitingMessage = 'Please confirm deposit transaction'\n                //deposit ERC20s only\n                if(+this.inputs[0] == 0) {\n                    this.waitingMessage = 'Please confirm deposit transaction'\n                    var { dismiss } = notifyNotification(this.waitingMessage)\n                    await helpers.setTimeoutPromise(100)\n                    let add_liquidity = currentContract.swap.methods.add_liquidity(this.amounts, token_amount).send({\n                        from: currentContract.default_account,\n                        gasPrice: this.gasPriceWei,\n                        gas: contractGas.deposit[this.currentPool],\n                    }).once('transactionHash', hash => {\n                        dismiss()\n                        notifyHandler(hash)\n                        this.waitingMessage = \n                        `Waiting for deposit \n                            <a href='http://etherscan.io/tx/${hash}'>transaction</a> \n                            to confirm ${stake ? 'before staking' : 'no further action required'}`\n                    })\n                    try {\n                        receipt = await add_liquidity\n                    }\n                    catch(err) {\n                        console.error(err)\n                        dismiss()\n                        errorStore.handleError(err)\n                        if(err.code == -32603) {\n                            await common.setTimeout(300)\n                            receipt = await add_liquidity\n                        }\n                    }\n                    this.waitingMessage = ''\n                    if(!stake ) this.show_loading = false\n                    if(stake) {\n                        try {\n                            minted = BN(\n                                Object.values(receipt.events).filter(event => {\n                                    return (event.address.toLowerCase() == allabis.sbtc.token_address.toLowerCase())\n                                            && event.raw.topics[1] == \"0x0000000000000000000000000000000000000000000000000000000000000000\" \n                                            && event.raw.topics[2].toLowerCase() == '0x000000000000000000000000' + currentContract.default_account.slice(2).toLowerCase()\n                                })[0].raw.data)\n                            await helpers.setTimeoutPromise(100)\n                            await this.stakeTokens(minted, true)\n                        }\n                        catch(err) {\n                            try {\n                                minted = BN(\n                                    Object.values(receipt.logs).filter(event => {\n                                        return (event.address.toLowerCase() == allabis.sbtc.token_address.toLowerCase())\n                                                && event.topics[1] == \"0x0000000000000000000000000000000000000000000000000000000000000000\" \n                                                && event.topics[2].toLowerCase() == '0x000000000000000000000000' + currentContract.default_account.slice(2).toLowerCase()\n                                    })[0].data)\n                                await helpers.setTimeoutPromise(100)\n                                await this.stakeTokens(minted, true)\n                            }\n                            catch(err) {\n                                console.error(err)\n                                this.errorStaking = true;\n                            }\n                        }\n                    }\n                }\n                else {\n    \t\t    \tlet add_liquidity = store.deposit({ btcAmount: this.inputs[0], amounts: this.amounts, min_amount: token_amount, gasPrice: this.gasPriceWei, stake: stake, })\n                    if(document.querySelector('.showdesktoptransactions').offsetParent !== null) {\n                        let el = document.querySelector('tbody tr td:first-child')\n                        !helpers.isElementInViewport(el) && el.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"})\n                    }\n                    else {\n                        let el = document.querySelector('.transactionmobile')\n                        !helpers.isElementInViewport(el) && el.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"})\n                    }\n    \t\t\t    try {\n    \t\t\t    \treceipt = await add_liquidity\n    \t\t\t    }\n    \t\t\t    catch(err) {\n    \t\t\t    \tif(err.code == -32603) {\n    \t\t\t    \t\tawait common.setTimeout(300)\n    \t\t\t    \t\treceipt = await add_liquidity\n    \t\t\t    \t}\n    \t\t\t    }\n                }\n\t\t\t\tthis.waitingMessage = ''\n\t\t\t\tthis.estimateGas = 0 \n\t\t\t\tthis.gasPrice = 0\n                this.justDeposit = false\n\n\t\t\t    await this.handle_sync_balances();\n\t\t\t    common.update_fee_info();\n\t\t\t},\n\t\t\thighlightInputs(i) {\n                if(i == 0) {\n                    if(this.amountAfterBTC < 0) Vue.set(this.bgColors, i, 'red')\n                    else Vue.set(this.bgColors, i, 'blue')\n                    return;\n                }\n\t\t\t\tlet value = this.inputs[i]\n                let balance = this.wallet_balances[i]\n                if(this.currentPool == 'sbtc' && i == 2) balance = this.transferableBalance\n\t\t\t\tif (value > balance * this.rates[i])\n\t                Vue.set(this.bgColors, i, 'red');\n\t            else\n\t                Vue.set(this.bgColors, i, 'blue');\n\t\t\t},\n\t\t\tasync change_currency(i, setInputs = true, event) {\n\t\t\t\tif(event) {\n\t\t\t\t\tthis.inputs[i] = event.target.value\n\t\t\t\t}\n\t            await this.calcSlippage()\n\t            var value = this.inputs[i]\n\t            this.highlightInputs(i)\n\t        },\n        }\n    }\n\n</script>\n\n<style>\n\t#add-liquidity {\n\t\tmargin-right: 1em;\n\t}\n\t#mintr {\n        margin-top: 1em;\n\t\tmargin-left: 1em;\n\t\ttext-align: center;\n\t}\n \t#stakeunstaked {\n \t\tmargin-left: 1em;\n    }\n    .pulse {\n        background: red;\n        animation: pulse 1s 3;\n        margin: 0;\n        margin-bottom: 8px;\n    }\n    .maxBalanceCoin {\n        cursor: pointer;\n    }\n    .maxBalanceCoin:hover {\n        text-decoration: underline;\n    }\n    .maxBalanceCoin > span {\n        font-size: 0.7em;\n    }\n    .pulse p {\n        margin-bottom: 0;\n    }\n    .currency_label {\n        display: block;\n        margin-bottom: 0.3em;\n    }\n    .currency_label .token-icon {\n        margin-right: 0.6em;\n    }\n    #inf_approval_wrapper {\n        margin-top: 1em;\n    }\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Deposit.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Deposit.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Deposit.vue?vue&type=template&id=1441f10d&\"\nimport script from \"./Deposit.vue?vue&type=script&lang=js&\"\nexport * from \"./Deposit.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Deposit.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Deposit.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Deposit.vue?vue&type=style&index=0&lang=css&\""],"sourceRoot":""}